@*@foreach (var key in Keys)
{
    <div>
        <label>@key.Name</label>
        @for (int i = 0; i < key.Chords.Count; i++)
        {
            var chord = key.Chords[i];
            <br />
            <label>@RomanNumeralize(i + 1, chord.Tone)</label>
            @chord.Root.GetName()
            <span class="chordNotes">
                (@string.Join("-", chord.Notes.Select(n => n.GetName())))
            </span>
        }
    </div>
    <br />
}*@

@foreach (var key in Keys)
{
    <div>
        <label>@key.Name</label>
        <table>
            <tbody>
                @for (int i = 0; i < key.Chords.Count; i++)
                {
                    var chord = key.Chords[i];
                    <tr>
                        <td><label>@RomanNumeralize(i + 1, chord.Tone)</label></td>
                        <td>@chord.Root.GetName()</td>
                        <td>(@string.Join("-", chord.Notes.Select(n => n.GetName())))</td>
                    </tr>
                }
                </tbody>
        </table>
    </div>
    <br />
}

@code {

    [Parameter]
    public List<Key> Keys { get; set; }

    private string RomanNumeralize(int chordNumber, ChordTone tone)
    {
        var romanNumeral = ToRoman(chordNumber);

        switch (tone)
        {
            case ChordTone.Augmented:
                return romanNumeral.ToLower() + "(aug)";
            case ChordTone.Diminished:
                return romanNumeral.ToLower() + "(dim)";
            case ChordTone.Minor:
                return romanNumeral.ToLower();
            case ChordTone.Major:
            default:
                return romanNumeral;
        }
    }

    private static string ToRoman(int number)
    {
        if (number < 1) return string.Empty;
        if (number >= 5) return "V" + ToRoman(number - 5);
        if (number >= 4) return "IV" + ToRoman(number - 4);
        if (number >= 1) return "I" + ToRoman(number - 1);
        throw new ArgumentOutOfRangeException("something bad happened");
    }
}
