@page "/keydetector"

<style>
    .selected {
        background-color: powderblue;
    }

    label {
        font-weight: bold;
    }

    th, td {
        border: 1px solid black;
        padding: 2px;
    }

    .buttonCell {
        width: 60px;
        display: inline-block;
        padding: 3px;
    }
</style>

<h3>KeyDetector</h3>

@*@foreach(var group in GroupedNotes)
    {
    <div>
        @if(!group.Any(n => n.ToString().Contains("f"))) {
            <span class="buttonCell"></span>
        }
        @foreach(var note in group)
        {
            <span class="buttonCell"><button @onclick="(e) => Toggle(note)" class="@(SelectedNotes.Contains(note) ? "selected" : "")">@note</button></span>
        }
    </div>
    }*@
@foreach (var note in GroupedNotes)
{
    <span class="buttonCell"><button @onclick="(e) => Toggle(note)" class="@(SelectedNotes.Contains(note) ? "selected" : "")">@note.GetName()</button></span>
}
<hr />
<div class="row">
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Major).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Minor).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Lydian).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Dorian).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Phrygian).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.HarmonicMinor).ToList()"></KeyDisplay>
    </div>
    <div class="col-md-6">
        <KeyDisplay Keys="SelectedKeys.Where(k => k.Tone == KeyTone.Mixolydian).ToList()"></KeyDisplay>
    </div>
</div>

@code {
    private static List<Note> GroupedNotes = GroupNotes();
    private List<Note> SelectedNotes = new List<Note>();
    private static List<Key> TotalKeys = KeyCalculator.CalculateKeys();
    private List<Key> SelectedKeys = new List<Key>();

    private void Toggle(Note note)
    {
        if (SelectedNotes.Contains(note))
        {
            SelectedNotes.Remove(note);
        }
        else
        {
            SelectedNotes.Add(note);
        }

        SelectedKeys = TotalKeys.Where(k => k.Notes.Intersect(SelectedNotes).Count() == SelectedNotes.Count()).ToList();
    }

    private static List<Note> GroupNotes()
    {
        return Enum.GetValues(typeof(Note)).Cast<Note>().ToList();
    }
}
