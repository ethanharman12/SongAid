@page "/capo"

<style>
    .selected {
        background-color: powderblue;
    }

    label {
        font-weight: bold;
    }

    th, td {
        border: 1px solid black;
        padding: 2px;
    }

    .buttonCell {
        width: 40px;
        display: inline-block;
        padding: 3px;
    }

    .open-string {
        background-color: powderblue;
    }

    .highlighted-note {
        background-color: lightseagreen;
    }
</style>

<h3>Capo</h3>

<div class="row">
    <div class="col-md-6">

        Capo Fret:
        <select @onchange="ChangeCapo">
            @for (int i = 0; i < 11; i++)
            {
                <option value="@i">@i</option>
            }
        </select>

        <table>
            <thead>
                <tr>
                    <th>Shape</th>
                    <th>Note w/ Capo Fret @CapoFret</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var note in Capoless)
                {
                    <tr>
                        <td>@note</td>
                        <td>@note.AddStep(CapoFret * .5).GetName()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        Selected Key:
        <select @onchange="ChangeKey">
            @foreach (var key in TotalKeys)
            {
                <option value="@key.Name">@key.Name</option>
            }
        </select>
        @if (SelectedKeys != null)
        {
            <KeyDisplay OnChordSelected="SelectChord" Keys="SelectedKeys"></KeyDisplay>
        }
    </div>
</div>
<hr />
<h3>Fret</h3>
@if (SelectedChord != null)
{
    <text>Selected Chord: @SelectedChord.Root.GetName()</text>
}
<table>
    <thead>
        <tr>
            <th class="open-string">0</th>
            @for (int i = 1; i <= 12; i++)
            {
                <th>@i</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var note in StringNotes)
        {
            <tr>
                @*<td class="open-string">@note</td>*@
                @for (int i = 0; i <= 12; i++)
                {
                    <td @attributes="DetermineFret(i, note.AddStep(i * .5))">@note.AddStep(i * .5).GetName()</td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    static List<Note> Capoless = new List<Note> { Note.A, Note.B, Note.C, Note.D, Note.E, Note.F, Note.G };
    static List<Note> StringNotes = new List<Note> { Note.E, Note.B, Note.G, Note.D, Note.A, Note.E };
    private static List<Key> TotalKeys = KeyCalculator.CalculateKeys();
    List<Key> SelectedKeys = new List<Key> { TotalKeys.First() };
    Chord SelectedChord;
    int CapoFret = 0;
    bool DirectionToggled = false;

    Dictionary<string, object> DetermineFret(int i, Note note)
    {
        var dict = new Dictionary<string, object>();
        if (SelectedChord?.Notes.Contains(note) == true && i >= CapoFret)
        {
            dict.Add("class", "highlighted-note");
            return dict;
        }
        if (i == CapoFret) dict.Add("class", "open-string");
        return dict;
    }

    private void ChangeCapo(ChangeEventArgs e)
    {
        CapoFret = int.Parse(e.Value.ToString());
    }

    private void SelectChord(Chord chord)
    {
        SelectedChord = chord;
    }

    private void ChangeKey(ChangeEventArgs e)
    {
        SelectedKeys = TotalKeys.Where(k => k.Name == e.Value.ToString()).ToList();
    }

    private void Toggle()
    {
        DirectionToggled = !DirectionToggled;
    }
}
